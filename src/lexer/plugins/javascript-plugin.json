{
    "id": "javascript",
    "grammars": {
        "whitespace": {
            "rule": "\\s",
            "name": ""
        },
        "number": {
            "rule": "[0-9]+",
            "name": "number"
        },
        "identifier": {
            "rule": "[a-zA-Z_]+",
            "name": "identifier"
        },
        "semicolon": {
            "rule": "\\;",
            "name": "semicolon"
        },
        "comma": {
            "rule": "\\,",
            "name": "comma"
        },
        "period": {
            "rule": "\\.",
            "name": "period"
        },
        "colon": {
            "rule": "\\:",
            "name": "colon"
        },
        "paren.open": {
            "rule": "\\(",
            "name": "paren.open"
        },
        "paren.close": {
            "rule": "\\)",
            "name": "paren.close"
        },
        "bracket.open": {
            "rule": "\\{",
            "name": "bracket.open"
        },
        "bracket.close": {
            "rule": "\\}",
            "name": "bracket.close"
        },
        "keyword": {
            "rule": "\\b(abstract|break|char|debugger|double|export|finally|goto|in|let|null|public|super|throw|try|volatile|arguments|byte|class|default|else|extends|float|if|instanceof|long|package|return|switch|throws|typeof|while|await|case|const|delete|enum|false|for|implements|int|native|private|short|synchronized|transient|var|with|boolean|catch|continue|do|eval|final|function|import|interface|new|protected|static|this|true|voname|yield|from)\\b",
            "name": "keyword"
        },
        "object": {
            "rule": "\\b[A-Z][a-zA-Z_0-9]?",
            "name": "object"
        },
        "operator": {
            "rule": "\\=|\\+|\\-|\\*|\\/|\\%|\\+\\+|\\-\\\\\\\\-|\\+\\=|\\-\\=|\\*\\=|\\/\\=|\\%\\=|\\=\\=|\\=\\=\\=|\\!\\=|\\!\\=\\=|\\>|\\<|\\>\\=|\\<\\=|\\?|\\:|\\&\\&|\\|\\||\\!|\\&|\\||\\~|\\^|\\<\\<|\\>\\>",
            "name": "operator"
        },
        "newline": {
            "rule": "\\n",
            "name": "newline"
        },
        "string_template": {
            "rule": "\".+?\"",
            "name": "string-template"
        },
        "string_literal": {
            "rule": "\\'.+?\\'",
            "name": "string-literal"
        },
        "template_literal": {
            "rule": "\\`.+?\\`",
            "name": "template-literal"
        },
        "line_comment": {
            "rule": "\/\/.+",
            "name": "line-comment"
        }
    }
}